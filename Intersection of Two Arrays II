

Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.

import java.util.*;

public class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        // Use a HashMap to count occurrences of elements in nums1
        Map<Integer, Integer> countMap = new HashMap<>();
        for (int i = 0; i < nums1.length; i++) {
            countMap.put(nums1[i], countMap.getOrDefault(nums1[i], 0) + 1);
        }

        // List to store the intersection elements
        List<Integer> intersectionList = new ArrayList<>();
        for (int i = 0; i < nums2.length; i++) {
            if (countMap.containsKey(nums2[i]) && countMap.get(nums2[i]) > 0) {
                intersectionList.add(nums2[i]); // Add the element to the result
                countMap.put(nums2[i], countMap.get(nums2[i]) - 1); // Decrease the count
            }
        }

        // Convert the result list to an array
        int[] result = new int[intersectionList.size()];
        for (int i = 0; i < intersectionList.size(); i++) {
            result[i] = intersectionList.get(i);
        }

        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        int[] nums1 = {1, 2, 2, 1};
        int[] nums2 = {2, 2};
        System.out.println("Intersection: " + Arrays.toString(solution.intersect(nums1, nums2))); // Output: [2, 2]

        nums1 = new int[]{4, 9, 5};
        nums2 = new int[]{9, 4, 9, 8, 4};
        System.out.println("Intersection: " + Arrays.toString(solution.intersect(nums1, nums2))); // Output: [4, 9]
    }
}
